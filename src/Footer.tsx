import { useState, useEffect, useRef } from "react";

const Footer = () => {
  const [isVisible, setIsVisible] = useState(false); // Tr·∫°ng th√°i ki·ªÉm tra ch·ªØ ƒë√£ xu·∫•t hi·ªán
  const footerRef = useRef(null); // Tham chi·∫øu ƒë·∫øn ph·∫ßn footer

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true); // Khi footer xu·∫•t hi·ªán trong viewport
        } else {
          setIsVisible(false); // Khi footer r·ªùi kh·ªèi viewport
        }
      },
      { threshold: 0.5 } // K√≠ch ho·∫°t khi 50% footer xu·∫•t hi·ªán
    );

    if (footerRef.current) {
      observer.observe(footerRef.current); // Quan s√°t ph·∫ßn footer
    }

    return () => {
      if (footerRef.current) {
        observer.unobserve(footerRef.current); // H·ªßy quan s√°t
      }
    };
  }, []);

  return (
    <div
      ref={footerRef}
      className="flex items-center justify-center text-center"
      style={{
        backgroundImage: "url('/07.jpg')", // ƒê∆∞·ªùng d·∫´n ƒë√∫ng ƒë·∫øn ·∫£nh
        backgroundSize: "cover", // Ph·ªß to√†n b·ªô v√πng n·ªÅn
        backgroundPosition: "top", // CƒÉn ch·ªânh ·∫£nh t·ª´ tr√™n xu·ªëng
        fontFamily: "Times New Roman, serif", // Ph√¥ng ch·ªØ Times New Roman
        height: "100vh", // Chi·ªÅu cao to√†n m√†n h√¨nh
        position: "relative",
      }}
    >
      {/* L·ªùi c·∫£m ∆°n */}
      <h2
        className={`text-6xl font-bold transition-all duration-1000 ${
          isVisible ? "opacity-100 text-black" : "opacity-0 text-white"
        }`}
        style={{
          textShadow: isVisible ? "none" : "2px 2px 10px rgba(0, 0, 0, 0.üòé",
          fontFamily: "'Dancing Script', cursive",
        }}
      >
        Thank you!
      </h2>
    </div>
  );
};

export default Footer;
